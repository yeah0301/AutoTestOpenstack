#encoding=UTF8
import sys
from PyUnitExtension import spiratestexecute
import re
import time
import restful_spiratest
import ConfigParser
import datetime
from time import sleep
import json
import random


class PostToSpiraTest():
    
    def __init__(self):
        
        #Initial config 
        config = ConfigParser.RawConfigParser(allow_no_value=True)
        config.read('config.cfg')
        
        print '[SpiraTest]\nserver:{}\nuser:{}\n--------------------'\
            .format(config.get('SpiraTest','server'),config.get('SpiraTest','user'))
            
        #Initial the parameters of SpiraTest API
        #We default set release id and test set id to -1
        #SpiraTest web application would handle the exception automatically
        self.releaseName = None
        self.releaseId = None
        self.testSetId = -1
        self.spiraTestExecute = spiratestexecute.SpiraTestExecute()
        self.spiraTestExecute.server = config.get('SpiraTest','server')
        self.spiraTestExecute.port = config.getint('SpiraTest','port')
        self.spiraTestExecute.path = config.get('SpiraTest','path')
        self.spiraTestExecute.userName = config.get('SpiraTest','user')
        self.spiraTestExecute.password = config.get('SpiraTest','password')
        self.spiraTestExecute.projectId = config.getint('SpiraTest','project_id')
        
        
        #Read the log file which is generated by Tempest
        #Then parse the content of log and transfer to objects
        if len(sys.argv) < 2:
            sys.exit('no argument[log path]')
        else:
            self.root_folder = sys.argv[1]
            self.log = self.parser_log(sys.argv[2])
            self.log_time = re.sub('(.+/)?(\d+)\.log', '\g<2>', sys.argv[2])
            if len(sys.argv) > 3 :
                self.releaseName = sys.argv[3]
    
    
        #Initial RESTful Spiratest 
        self.spiratest = restful_spiratest.RESTfulSpiratest(dict(config.items('SpiraTest')))
        #To create the test case or the folder,we must get randomly the id of test case which existed in root
        self.root_test_case_id = config.getint('SpiraTest','root_test_case_id')
        
        if all(len(self.log[cls_path])==0 for cls_path in self.log):
            error = 'ALL SKIP, NO INSTALL {} COMPONENT!!'.format(self.root_folder)
            sys.exit(error)
        else:
            pass
        

    def parser_log(self,path):
        """
            Parser the result log which tempest had tested and generated  
            return class name, function name ,execution status, execution time, and python traceback\
            
            The example of test case format after parsing Tempest log
            {
                'tempest.path.file.class':{
                    'function':{
                        status:OK, FAIL, or SKIP(String),
                        traceback:the stack trace of python error(String),
                        id:idempotent_id(String),
                        time:executed time(Float)
                    }
                }
            }
        """
        
        result = {}
        
        is_statistics = True
        is_traceback = False
        is_fail_statement = False
        is_setupclass = False
        
        setupclass_str = ''
        fail_str = ''
        traceback_str = ''
        currnet_fail_func = ''
        currnet_fail_cls =''
        traceback_end_space_count = 0;
    
        for line in open(path):
            
            #class name
            if re.match('tempest\.\S+', line) and is_statistics:
                current_class = line.strip(' \t\n\r')
                if current_class in result.keys():
                    pass
                else:
                    result[current_class] = {}
            
            elif re.match(u'setUpClass\s*\(.+', line):
                setupclass_str = line.strip(' \t\n\r')
                is_setupclass = True
                 
            elif is_setupclass:
                setupclass_str = setupclass_str + '.' + line.strip(' \t\n\r')
                result[re.sub('\S+\s*\((\S+)\).*', '\g<1>', setupclass_str)] = {}
                setupclass_str = ''
                is_setupclass = False
                
            #test case function in class
            elif re.match('.*test\S+\[\S+\]\s*\S+\s*([\d\.])*$', line) and is_statistics:  
                func_name = re.sub('test_(\S+)\[.+', 'test_\g<1>', line).strip(' \t\n\r')
                testid = re.sub('\S+\[\S*id-([a-zA-Z0-9\-]+)\S*\].+', '\g<1>',line).strip(' \t\n\r')
                status = re.sub('.+\]\s*(\S+).*', '\g<1>', line).strip(' \t\n\r')
                try:
                    time = float(re.sub('.+\s+([\d.]+)(\r\n)?$','\g<1>' , line))
                except ValueError:
                    time = 0
                result[current_class][func_name] = {'id':testid, 'status':status, 'time':time ,'traceback':''}
                          
            elif u'======================================================================' in line:
                is_fail_statement = True
                     
            elif u'----------------------------------------------------------------------' in line:
                if re.match(u'FAIL:\s*\S+\s*\(\S+\)', fail_str):
                    currnet_fail_cls = re.sub(u'FAIL:\s*\S+\s*\((\S+)\)', '\g<1>', fail_str)
                    #print(currnet_fail_cls)
                else:
                    currnet_fail_func = re.sub('.+\.(\S+)\[\S+\]', '\g<1>',fail_str)
                    currnet_fail_cls = re.sub('FAIL:\s*(.+)\.\S+\[\S+\]', '\g<1>',fail_str)
                    print(currnet_fail_cls)
                    
                fail_str = ''
                is_fail_statement = False
                is_traceback = True
                     
            elif is_fail_statement :
                fail_str += line.strip(' \t\n\r')
                     
            elif is_traceback:
                #print(line)
                if re.match('^\s*$', line):
                    traceback_end_space_count += 1
                    if traceback_end_space_count == 2:
                        if currnet_fail_func is '':
                            result[currnet_fail_cls]['traceback'] = traceback_str
                        else:
                            #print(currnet_fail_cls)
                            #print(currnet_fail_func)
                            result[currnet_fail_cls][currnet_fail_func]['traceback'] = traceback_str
                                
                        is_traceback = False
                        traceback_end_space_count = 0
                        currnet_fail_cls = ''
                        currnet_fail_func = ''
                    else:
                        pass
                else:
                    traceback_str += line
         
            elif re.match(u'Slowest \d+ tests took.+',line):
                is_statistics = False
            
            
        return result


    def transform_execution_status_to_int(self,execution_status_str):
        """
            execution status 
            1 fail
            2 ok
            
        """
        status = {'fail':1,'OK':2,'FAIL':1,'ok':2}
        
        for tmp in status:
            if tmp in execution_status_str:
                return status[tmp]
        #return status[execution_status_str]
    
    def get_assert_count(self,execution_status_str):
        """
            The assert count is 1 for failures and 0 for passes 
            from PyUnitExtension.spiratestextension row 31
        
        """
        return 1 if execution_status_str == 'fail' else 0
    
    def get_time(self):
        return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def update_test_cases(self):
        
        for cls_path in self.log:
            if self.root_folder not in cls_path:
                continue
            else:
                pass
            
            cls = cls_path.split(self.root_folder+'.')[1].split('.')[-1]
            for func_name in self.log[cls_path]:
                
                test_case_id = self.test_cases['Test_case'][cls+'::'+func_name]
                
                #We can't report back the testing time for these restful_spiratest cases 
                #So we'll just return back the current date/time
                startDate = time.localtime()
                endDate = time.localtime()
                
                print '{} POST    Test case:{}'.format(self.get_time(),func_name)
                #Update the result to the test case mapping to id by SpiraTest API
                self.spiraTestExecute.recordTestRun(-1
                                               , test_case_id 
                                               , self.releaseId
                                               , self.testSetId
                                               , startDate
                                               , endDate
                                               , self.transform_execution_status_to_int(self.log[cls_path][func_name]['status'])
                                               , 'Tempest'
                                               , func_name
                                               , self.get_assert_count(self.log[cls_path][func_name]['status'])
                                               , self.log[cls_path][func_name]['status']
                                               , self.log[cls_path][func_name]['traceback'])
                sleep(1.26+random.random())
             

    def create_test_cases(self,parent):
        
        for cls_path in self.log:
            if self.root_folder not in cls_path:
                continue
            else:
                pass
            
            #create folder behind root folder
            ##parent
            cls_path_split = cls_path.split(self.root_folder+'.')[1].split('.')
            for i in range(len(cls_path_split)-1):
                #Refresh test cases
                self.test_cases = self.spiratest.get_test_cases()
                sleep(1+random.random())
                print '{} CREATE  Folder   :{}'.format(self.get_time(),cls_path_split[i])
                self.spiratest.create_test_folder(cls_path_split[i],self.test_cases['Folder'][parent])
                parent = cls_path_split[i]
                sleep(1.2+random.random())
                
            parent = self.root_folder
            cls = cls_path_split[-1]
            
            
            #create the test case         
            for func_name in self.log[cls_path]:
                test_case = cls+'::'+func_name
                #Create the test case(test function name in class) in SpiraTest by RESTful
                print '{} CREATE  Test case:{}'.format(self.get_time(),func_name)
                self.spiratest.create_test_case(test_case, self.test_cases['Folder'][parent])
                sleep(1.3+random.random())
                
                #test_id = test_cases['Test_case'][test_case]
            self.test_cases = self.spiratest.get_test_cases()
            
            
    
    def doWrok(self):
        
        #Get current all the the test case name and id
        self.test_cases = self.spiratest.get_test_cases()
        
        if self.releaseName is None:
            #Create the random release
            releaseName = 'Kilo#' + self.log_time
            print '{} CREATE  SpiraTest Release:{}'.format(self.get_time(),releaseName)
            releaseRep = self.spiratest.create_release(releaseName, releaseName, self.log_time, self.log_time)
            self.releaseId = json.loads(releaseRep)['ReleaseId']
        else:
            #get release id mapping to release name
            releases = self.spiratest.get_releases()
            if self.releaseName in releases:
                self.releaseId = releases[self.releaseName]
            else:
                print '{} CREATE  SpiraTest Release:{}'.format(self.get_time(),self.releaseName)
                releaseRep = self.spiratest.create_release(self.releaseName, self.releaseName, self.log_time, self.log_time)
                self.releaseId = json.loads(releaseRep)['ReleaseId']
            
        
        #create root folder
        parent = ''
        if any(self.root_folder == folder for folder in self.test_cases['Folder'].keys()):
            pass
        else:
            self.spiratest.create_test_folder(self.root_folder,self.root_test_case_id)
            #Refresh test case list and the set of id
            self.test_cases = self.spiratest.get_test_cases()
            parent = self.root_folder
        
        #TO DO:error update
        if parent is '':
            print 'FINISH Test Cases have already existed'
        else:
            self.create_test_cases(parent)
            
        self.update_test_cases()
        print '----------------------------------'
      
                    
if __name__ == '__main__':
    
    post = PostToSpiraTest()
    post.doWrok()
    
    